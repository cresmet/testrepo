openapi: 3.0.0
info:
  version: '2.1'
  title: Rebilly REST API
  contact:
    name: Rebilly API Support
    url: 'https://www.rebilly.com/contact/'
    email: integrations@rebilly.com
  license:
    name: Rebilly
    url: 'https://www.rebilly.com/api-license/'
  termsOfService: 'https://www.rebilly.com/terms/'
  x-logo:
    url: 'https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg'
    backgroundColor: '#0033A0'
  description: >
    # Introduction

    The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable

    resource URLs.  It returns HTTP response codes to indicate errors.  It also

    accepts and returns JSON in the HTTP body.  You can use your favorite

    HTTP/REST library for your programming language to use Rebilly's API, or

    you can use one of our SDKs (currently available in
    [PHP](https://github.com/Rebilly/rebilly-php)

    and [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).


    We have other APIs that are also available.  Every action from our
    [app](https://app.rebilly.com)

    is supported by an API which is documented and available for use so that you

    may automate any workflows necessary.  This document contains the most
    commonly

    integrated resources.


    # Authentication

    When you sign up for an account, you are given your first API key.

    You can generate additional API keys, and delete API keys (as you may

    need to rotate your keys in the future). You authenticate to the

    Rebilly API by providing your secret key in the request header.


    Rebilly offers three forms of authentication:  secret key, publishable key,
    JSON Web Tokens, and public signature key.

    - [Secret API key](#section/Authentication/SecretApiKey): used for requests
    made from the server side. Never share these keys. Keep them guarded and
    secure

    - [Publishable API key](#section/Authentication/PublishableApiKey): used for
    requests from the client side. For now can only be used on the [Tokens
    resource](#tag/Payment-Tokens/paths/~1tokens/post)

    - [JWT](#section/Authentication/JWT): short lifetime tokens that can be
    assigned a specific expiration time


    Never share your secret keys. Keep them guarded and secure.


    <!-- ReDoc-Inject: <security-definitions> -->


    # PHP SDK

    For all PHP SDK examples provided in this spec you will need to configure
    `$client`.

    You may do it like this:


    ```php

    $client = new Rebilly\Client([
        'apiKey' => 'YourApiKeyHere',
        'baseUrl' => 'https://api.rebilly.com',
    ]);

    ```


    # Using filter

    Rebilly provides collections filtering. You can use `?filter` param on
    collection to define which records should be shown in the response.


    Here is filter format description:


    - Fields and values in filter are separated with `:`:
    `?filter=firstName:John`.


    - Fields in filter are separated with `;`:
    `?filter=firstName:John;lastName:Doe`.


    - You can use multiple values using `,` as values separator:
    `?filter=firstName:John,Bob`.


    - To negate the filter use `!`: `?filter=firstName:!John`. Note that you can
    negate multiple values like this: `?filter=firstName:!John,Bob`. This filter
    rule will exclude all Johns and Bobs from the response.


    - You can use range filters like this: `?filter=amount:1..10`.


    - You can use gte (greater than or equals) filter like this:
    `?filter=amount:1..`, or lte (less than or equals) than filter like this:
    `?filter=amount:..10`.


    - You can create some [predefined values
    lists](https://rebilly.github.io/RebillyUserAPI/#tag/Lists) and use them in
    filter: `?filter=firstName:@yourListName`. You can also exclude list values:
    `?filter=firstName:!@yourListName`
servers:
  - url: 'https://api.rebilly.com/v2.1'
    description: Live Server
  - url: 'https://api-sandbox.rebilly.com/v2.1'
    description: Sandbox Server
tags:
  - name: 3D Secure
    description: |
      3D Secure is a way to authenticate and protect transactions.  Typically,
      it's only possible to protect the initial transaction in a subscription
      with 3D Secure.
  - name: Bank Accounts
    description: |
      Bank Accounts are a type of payment instrument used to collect
      ACH (echeck) payments, similar to how a payment
      card would be used to for a credit card payment.
  - name: Blacklists
    description: |
      Your blacklists contains values of customerIds, email addresses,
      ipAddresses, bank identification numbers, countries or payment cards that
      you do NOT want to do business with. They are a good tool for managing
      risk. A blacklist entry that expires after a period of time we call a
      greylist.
  - name: Contacts
    description: >
      Contacts are Customer's address book.

      All contact information used in Invoices, Subscriptions, Transactions, etc
      is enlisted here. Hovewer, changing a Contact won't change corresponding
      contact information in related resources
  - name: Coupons
    description: >
      Coupons allows to apply different types of discounts to Invoices,
      Subscriptions and Plans. Redeemed Coupons will be applied only to Invoices
      with the same currency.
  - name: Customers
    description: |
      Customers are your customers, sometimes known as accounts, clients,
      members, patrons, or players in other systems.
  - name: KYC Documents
    description: >
      Customer KYC files uploaded on behalf of a customer, tagged with a
      document type

      and submitted for validation.
  - name: Customer Authentication
    description: >
      Create authentication credentials, login, logout, and verify your
      customers.
  - name: Custom Fields
    description: |
      Create additional custom fields for particular resources.  You may name,
      describe, and determine the type of the schema.
  - name: Disputes
    description: |
      Handle disputes (chargebacks and retrievals).
  - name: Files
    description: >
      A File is an entity that can store a physical file and some metadata. It
      also provides an easy access to

      its size, mime-type, user-defined tags and description thus allowing easy
      sorting and searching among stored

      files.

      There are several methods of file uploading available: multipart/form-data
      encoded form, RAW POST (by sending

      file contents as POST body), fetching from URL (by providing the file URL
      via 'url' param)

      Attachment is an entity that is used to link a File to one or multiple
      objects like Customer, Dispute, Payment,

      Transaction, Subscription, Plan, Product, Invoice, Note. That allows to
      quickly find and use files related to

      those specific entities.
  - name: Invoices
    description: >
      Invoices leave a record for both you and your customer of the products
      sold.
  - name: Payments
    description: >
      Payments endpoints are deprecated.  Please use the transactions resource

      instead.  A payment is a transaction with type `sale`.  The transactions

      resource is more robust and has withstood the test of time by enterprises.


      Collect money from your customers with payments.  You can schedule a
      payment

      to occur in the future.  You can assign a dunning schedule to a payment to
      collect

      in the case of a decline.


      Some payments may be, what we term, offsite payments.  These types of
      payments

      require user interaction.  For example, an initial PayPal purchase, a 3D
      Secure

      purchase, China Union Pay, and more require the customer's interaction to

      complete the payment.  We call these a "offsite" payment flow.
  - name: Payment Cards
    description: >
      Payment cards are a type of payment instrument used for credit and debit
      card

      sales.  Rebilly securely vaults the full payment card number, and can pass
      it

      onward securely to any gateway account to transact business.
  - name: PayPal Accounts
    description: >
      PayPal Accounts are used for paying with PayPal.  We can generate a BAID
      (billing

      agreement id) which will allow for recurring billing.
  - name: Payment Tokens
    description: >
      Payment tokens are used to reduce the scope of PCI DSS compliance.  A
      payment

      token can be made using a different authentication scheme (refer to the
      public key

      authentication scheme in the Authentication section), which allows you to

      create a payment token directly from the browser, bypassing the need to
      send

      sensitive cardholder info to your servers.  We recommend using this with
      our

      Rebilly.js library, which helps you wire a form into this API resource and
      create

      payment tokens.
  - name: Plans
    description: >
      Plans are a template for making a subscription.  For example, you may have
      a plan

      that has a 30-day free trial followed by a recurring charge of $19.95 per
      month

      until canceled.  The combination of the plan and a request to make a
      subscription

      will apply those instructions to create the invoices according to the
      plan's

      schedule.
  - name: Products
    description: |
      A product describes what you sell (goods or services).
      A product determines how what you sell appears on invoices and receipts.
      The pricing for products is set in Plans.  One product can have many
      plans.
  - name: Reports
    description: >
      The Rebilly Reporting API is currently experimental. You may see

      the [Reports API Documentation
      here](https://rebilly.github.io/RebillyReportsAPI/).
  - name: Shipping Zones
    description: >
      A shipping zone contains regions and countries that you ship to. Each
      shipping zone has its own shipping rates.
  - name: Subscriptions
    description: >
      A subscription applies a plan's template to create invoices for a customer
      at the

      appropriate scheduled intervals.  A subscription may also determine if the
      payment

      is collected automatically (with autopay set true).
  - name: Taxes
    description: |
      You can map a product to a tax category.  The tax category is used by
      tax providers to calculate taxes for invoices.
  - name: Transactions
    description: |
      Get and refund transactions.
  - name: Users
    description: >
      The Rebilly User API is primarily for our GUI apps.  You may see

      the [User API Documentation
      here](https://rebilly.github.io/RebillyUserAPI/).

      A User represents a person who can login to Rebilly, and take actions
      subject to

      their granted permissions.  It has resources less commonly integrated by

      3rd parties.
x-tagGroups:
  - name: Customers
    tags:
      - Customers
      - Customer Authentication
      - Custom Fields
      - Contacts
      - Files
      - KYC Documents
  - name: Payment Instruments
    tags:
      - Bank Accounts
      - Payment Cards
      - Payment Tokens
      - PayPal Accounts
      - Payment Instrument Validation
  - name: Payments
    tags:
      - 3D Secure
      - Payments
      - Transactions
      - Disputes
      - Blacklists
  - name: Invoices & Subscriptions
    tags:
      - Coupons
      - Invoices
      - Plans
      - Products
      - Shipping Zones
      - Subscriptions
      - Taxes
  - name: Misc
    tags:
      - Reports
      - Users
security:
  - SecretApiKey: []
  - JWT: []
