swagger: '2.0'
schemes:
  - https
host: api.thingful.net
basePath: /
info:
  description: >
    Thingful.net API documentation - design document.


    **This draft of the documentation is a design proposal, and is not currently
    deployed, though it is under development.**
  version: 2017.06.05
  title: Thingful
  termsOfService: 'https://thingful.net/site/tos/'
  contact:
    email: support@thingful.net
    url: 'https://thingful.net/site/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: logo.png
produces:
  - application/json
  - text/csv
consumes:
  - application/json
  - text/csv
tags:
  - name: things
    description: Operations to do with discovering and accessing IoT resources.
  - name: channels
    description: Operations to do with accessing individual thing channels
  - name: search
    description: Search operations
securityDefinitions:
  bearer:
    description: >
      This scheme relies on authenticating users by having them present a
      standard `Authorization` header containing the value `Bearer` followed by
      their API key.
    type: apiKey
    name: Authorization
    in: header
  api_key:
    description: >
      For clients unable to send request headers, they may also authenticate
      themselves by sending their API key via a query parameter.
    type: apiKey
    in: query
    name: key
parameters:
  authorizationHeader:
    name: Authorization
    in: header
    type: string
    description: >
      Standard Authorization header; if used then token must be sent using the
      `Bearer` format, e.g. `Authorization: Bearer <token>`.
  apiKey:
    name: key
    in: query
    type: string
    description: >
      For clients unable to send HTTP headers, they may also send their
      authorization token via this query parameter. This method of
      authentication is not recommended, as it can lead to credentials appearing
      in server logs.
  correlationId:
    name: X-Correlation-Id
    in: header
    type: string
    description: >
      Header that holds an identifier which a client can choose to send in order
      to aid in debugging failing requests. When this request header is present
      it will be attached to incoming request, and this value will be tagged
      onto all log messages generated by this specific request. Finally the same
      identifier will be returned to the client via the same `X-Correlation-Id`
      header. If this header is not sent by the client, the server will return a
      random internally generated identifier.
  refresh:
    name: refresh
    in: query
    type: boolean
    description: >
      Boolean flag indicating whether or not the client desires Thingful to go
      and try and retrieve the latest value from the upstream data provider, or
      just to return the last indexed value currently stored in Thingful's
      database.


      It is an error to set `refresh` to true if the client has supplied either
      of the historical time parameters, i.e. `from` or `to`.
    default: false
  thingID:
    name: thingID
    in: path
    description: The ID of the Thing
    required: true
    type: string
  perPage:
    name: perPage
    in: query
    type: integer
    description: >
      This parameter is used when paging through result sets to control how many
      results are returned within a single request.


      This parameter can be used both within search results and time series
      queries expressed at the channel level.
    maximum: 1000
    minimum: 1
  nextCursor:
    name: nextCursor
    in: query
    type: string
    description: >
      For all result sets for which we can paginate through, this parameter is
      used to request the next page of results form within the complete result
      set. Clients should not assume they can calculate the value of this
      parameter, instead they should use the value for this parameter as
      supplied from the server back to the client in the form of the `links`
      property on all paginated result sets.
  providerId:
    name: provider.id
    in: query
    type: string
    format: url
    description: The ID of a provider expressed as a fully qualified Thingful URL.
  licenseId:
    name: license.id
    in: query
    type: string
    format: url
    description: The ID of a license known to Thingful expressed as a fully qualified URL.
  licensePermits:
    name: license.permits
    in: query
    type: string
    description: >
      This parameter allows clients to search for things that permit certain
      types of use, where the value of this query parameter is either an
      expandable JSON-LD property or the complete URL.
  licenseRequires:
    name: license.notRequires
    in: query
    type: string
    description: >
      This parameter allows clients to search for things that do not require
      certain behaviours, where the value this parameter is either an expandable
      JSON-LD property or the complete URL. For example to search for things
      that do not require attribution you might say
      `license.notRequires=cc:Attribution`
  licenseProhibits:
    name: license.notProhibits
    in: query
    type: string
    description: >
      This parameter allows clients to search for things that do not prohibit
      certain behaviours, where the value this parameter is either an expandable
      JSON-LD property or the complete URL, for example
      `license.notProhibits=cc:CommercialUse` would search for data that does
      not prohibit commercial uses of that data.
  longitude:
    name: long
    in: query
    description: Longitude of a point around which to search
    type: number
    format: float
    maximum: 180
    minimum: -180
  latitude:
    name: lat
    in: query
    description: Latitude of a point around which to search
    type: number
    format: float
    maximum: 90
    minimum: -90
  radius:
    name: radius
    in: query
    description: >-
      Radius in metres defining the search area around the point specified by
      `long` and `lat`
    type: number
    format: float
    minimum: 10
    maximum: 10000
  sort:
    name: sort
    in: query
    description: >
      Specify how results should be sorted, either ordered by how recently the
      resource was last updated, or by distance from the specified search
      location, or if a full text query has been specified using the `q`
      parameter by a score value indicating how good a match for the search
      request the resource is.


      It is an error to specify a sort of `distance` if no geographical location
      has been specified for the current request.


      It is an error to specify a sort of `score` if no full text search query
      has been specified for the current request.
    type: string
    enum:
      - lastUpdated
      - distance
      - score
    default: lastUpdated
  from:
    name: from
    in: query
    description: >
      This parameter is used to specify the start point of a time interval for
      which the client wishes to obtain data. It is expressed as an RFC3339
      timestamp.
    type: string
    format: date-time
  to:
    name: to
    in: query
    description: >
      This parameter is used to specify the end point of a time interval for
      which the client wishes to obtain data. It is expressed as an RFC3339
      timestamp.


      The maximum range that clients can currently request data for is 10 days
      though this value is liable to change at any time.


      If a client requests an interval greater than the currently defined
      maximum we return a 400 error response to the client with an error message
      detailing the problem.
    type: string
    format: date-time
  quantityKind:
    name: channel.quantityKind
    in: query
    type: string
    description: >
      This parameter is used to search for channels that measure a specific
      quantity kind known to Thingful. The value of this field must either be a
      full URL referencing a quantiy kind defined in one of the ontologies
      imported by Thingful, or it can be a JSON-LD expandable property, i.e.
      `m3-lite:Temperature`.


      When this parameter is requested at the Thing level it returns Things
      where at least one channel measures this quantity kind, but all other
      channels are returned. When used on the Channel level it only returns
      channels that measure this quantity kind.


      The complete list of available quantity kinds can be found via our
      ontology explorer.
  measuredBy:
    name: channel.measuredBy
    in: query
    type: string
    description: >
      This parameter is used to search for Channels measured by the sensor type
      given as the value of this parameter. The value of this field must either
      be a full URL referencing a quantiy kind defined in one of the ontologies
      imported by Thingful, or it can be a JSON-LD expandable property, e.g.
      `m3-lite:Thermometer` or `m3-lite:SoilHumiditySensor`


      When this parameter is requested at the Thing level it returns Things
      where at least one channel was measured by this sensor type, but all other
      channels are returned. When used on the Channel level it only returns
      channels that were measured by this sensor type.


      The complete list of available sensor types can be found via our ontology
      explorer.
  unit:
    name: channel.unit
    in: query
    type: string
    description: >
      This parameter is used to search for channels that are measured in a
      specific unit. The value of this field must be either a full URL
      referencing a unit defined in one of the ontologies Thingful imports, or
      it can be expressed as a JSON-LD expandable property, i.e.
      `m3-lite:DegreeCelsius`


      When this parameter is requested at the Thing level it returns Things
      where at least one channel has this unit, but all other channels are
      returned. When used on the Channel level it only returns channels that
      have this unit.


      A complete list of available units can be found via our ontology explorer.
  domain:
    name: channel.domain
    in: query
    type: string
    description: >
      This parameter is used to search for channels that relate to a specific
      domain of interest. The value of this field must be either a full URL
      referencing a domain defined in one of the ontologies Thingful imports, or
      it can be expressed as a JSON-LD expandable property, i.e.
      `m3-lite:Weather`


      When this parameter is requested at the Thing level it returns Things
      where at least one channel concerns this domain, but all other channels
      are returned. When used on the Channel level it only returns channels that
      concern this domain.
  query:
    name: q
    in: query
    type: string
    description: >
      This parameter is used to supply a full text search parameter which
      attempts to find things containing this value somewhere in their title or
      description.
responses:
  ThingSuccessResponse:
    description: Success
    schema:
      type: object
      properties:
        '@context':
          $ref: '#/definitions/Context'
        links:
          $ref: '#/definitions/Links'
        data:
          type: object
          properties:
            id:
              $ref: '#/definitions/ThingID'
            type:
              $ref: '#/definitions/ThingType'
            attributes:
              allOf:
                - $ref: '#/definitions/ThingAttributes'
                - $ref: '#/definitions/ThingAccessAttributes'
                - $ref: '#/definitions/TimestampAttributes'
    headers:
      X-Correlation-Id:
        description: >-
          A request specific identifier returned by the server that can be used
          for debugging failing requests to the API. If a client supplies this
          header then this value will be returned to them, else a unique
          identifier will be generated on the server.
        type: string
      X-RateLimit-Limit:
        description: The number of allowed requests for the current time period.
        type: integer
      X-RateLimit-Remaining:
        description: >-
          The number of allowed requests remaining for the client within the
          current time period.
        type: integer
      X-RateLimit-Rest:
        description: The number of seconds left in the current time period.
        type: integer
  ChannelSuccessResponse:
    description: Success
    schema:
      type: object
      properties:
        '@context':
          $ref: '#/definitions/Context'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              description: >-
                Link referencing the current document being viewed by the
                client.
              example: >-
                https://api.thingful.net/things/bj7ajg91/channels/temperature?from=2017-01-01T00:00:00Z&to=2017-01-07T00:00:00Z
            next:
              type: string
              format: url
              description: >-
                Link pointing to the next page of observations available for the
                channel if any.
              example: >-
                https://api.thingful.net/things/bj7ajg91/channels/temperature?from=2017-01-01T00:00:00Z&to=2017-01-07T00:00:00Z&after=2017-01-02T00:00:00Z
        data:
          type: object
          properties:
            id:
              $ref: '#/definitions/ChannelID'
            type:
              $ref: '#/definitions/ChannelType'
            attributes:
              allOf:
                - $ref: '#/definitions/ChannelMetadataAttributes'
                - $ref: '#/definitions/ChannelDataTypeAttributes'
                - $ref: '#/definitions/ChannelObservationAttributes'
                - $ref: '#/definitions/ChannelExtraAttributes'
                - $ref: '#/definitions/TimestampAttributes'
                - $ref: '#/definitions/ChannelHistoricalAttributes'
    headers:
      X-Correlation-Id:
        description: >-
          A request specific identifier returned by the server that can be used
          for debugging failing requests to the API. If a client supplies this
          header then this value will be returned to them, else a unique
          identifier will be generated on the server.
        type: string
      X-RateLimit-Limit:
        description: The number of allowed requests for the current time period.
        type: integer
      X-RateLimit-Remaining:
        description: >-
          The number of allowed requests remaining for the client within the
          current time period.
        type: integer
      X-RateLimit-Rest:
        description: The number of seconds left in the current time period.
        type: integer
  500ErrorResponse:
    description: Server Error
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        errors:
          - status: '500'
            title: Unexpected Error
            detail: An error occurred while saving record to the database
  401ErrorResponse:
    description: Unauthorized
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        errors:
          - status: '401'
            title: Unauthorized
            detail: You are not authorized to view this resource.
  404ErrorResponse:
    description: Not Found
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        errors:
          - status: '404'
            title: Resource Not Found
            detail: Unable to locate the requested resource
  Thing404ErrorResponse:
    description: Requested Thing not found
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        errors:
          - status: '404'
            title: Not Found
            detail: >-
              Unable to locate the Thing at
              https://api.thingful.net/things/bj7ajg91
  400ErrorResponse:
    description: Bad Request
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        errors:
          - status: '400'
            title: Bad Request
            detail: Missing required parameter
            source:
              parameter: long
  403ErrorResponse:
    description: Forbidden
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        errors:
          - status: '403'
            title: Forbidden
            detail: You are forbidden from accessing this resource
  422ErrorResponse:
    description: Invalid Body
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        errors:
          - status: '422'
            title: Invalid Request
            detail: Missing required field
            source:
              pointer: /data/attributes/title
