parameters:
  - $ref: '#/components/parameters/resourceId'
get:
  tags:
    - Customers
  summary: Retrieve a customer
  description: |
    Retrieve a customer with specified identifier string
  responses:
    '200':
      description: Customer was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
  x-code-samples:
    - lang: PHP
      source: |
        $customers = $client->customers()->load('myCustomerId');
put:
  tags:
    - Customers
  summary: Create a customer with predefined ID
  description: |
    Create a customer with predefined identifier string
  requestBody:
    $ref: '#/components/requestBodies/Customer'
  responses:
    '200':
      description: Customer was updated
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    '201':
      description: Customer was created
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '409':
      $ref: '#/components/responses/Conflict'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $customerForm = new Rebilly\Entities\Customer();
        $customerForm->setPrimaryAddress([
            'firstName' => 'John',
            'lastName' => 'Doe',
            'organization' => 'Test LTD',
            'address' => 'Test street 5',
            'address2' => 'Test house 5',
            'city' => 'New York',
            'region' => 'Long Island',
            'country' => 'US',
            'postalCode' => '123456',
            'emails' => [
                [
                    'label' => 'main',
                    'value' => 'johndoe@testemail.com',
                    'primary' => true,
                ],
                [
                    'label' => 'secondary',
                    'value' => 'otheremail@testemail.com',
                ],
            ],
            'phoneNumbers' => [
                [
                    'label' => 'work',
                    'value' => '+123456789',
                    'primary' => true,
                ],
                [
                    'label' => 'home',
                    'value' => '+9874654321',
                ],
            ],
        ]);

        try {
            $customer = $client->customers()->update('myCustomerId', $customerForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
